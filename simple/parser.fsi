// Signature file for parser generated by fsyacc
type token = 
  | NOT
  | PROC
  | CALL
  | GET
  | ASSIGN
  | PRINT
  | EOF
  | SEMI
  | IF
  | THEN
  | ELSE
  | WHILE
  | EQUAL
  | GT
  | GE
  | LT
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | LBRACE
  | RBRACE
  | LPAREN
  | RPAREN
  | INT of (System.Int32)
  | FLOAT of (System.Double)
  | ID of (string)
type tokenId = 
    | TOKEN_NOT
    | TOKEN_PROC
    | TOKEN_CALL
    | TOKEN_GET
    | TOKEN_ASSIGN
    | TOKEN_PRINT
    | TOKEN_EOF
    | TOKEN_SEMI
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_EQUAL
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_INT
    | TOKEN_FLOAT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_decl
    | NONTERM_decls_and_stmts
    | NONTERM_stmtgroup
    | NONTERM_stmt
    | NONTERM_stmt_a1
    | NONTERM_stmt_a2
    | NONTERM_expr
    | NONTERM_expr_p0
    | NONTERM_expr_p1
    | NONTERM_expr_p2
    | NONTERM_expr_p3
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val program : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Ast.stree list) 
