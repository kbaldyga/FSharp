{
module Lexer
open System
open Parser
//open Ast
open Microsoft.FSharp.Text
open Microsoft.FSharp.Text.Lexing
}

let digit = ['0'-'9']
let whitespace = [' ' '\t']
let newline = ('\n' | '\r' '\n')
let alpha = ['a'-'z' 'A'-'Z']

rule token = parse
  | whitespace+     { token lexbuf }
  | newline+        { token lexbuf }
  | '@' alpha+      { ID(Lexing.lexeme lexbuf) }
  | ['-']?digit+    { INT (Int32.Parse (Lexing.lexeme lexbuf)) } 
  | ['-']?(digit)+ '.' digit*     { FLOAT (Double.Parse((Lexing.lexeme lexbuf).Replace('.',','))) }
  | "if"            { IF }
  | "then"          { THEN }
  | "else"          { ELSE }
  | "print"         { PRINT }
  | '+'             { PLUS }
  | '-'             { MINUS }
  | '*'             { TIMES }
  | '/'             { DIV }
  | '('             { LPAREN }
  | ')'             { RPAREN }
  | '{'             { LBRACE }
  | '}'             { RBRACE }
  | ';'             { SEMI }
  | "=="            { EQUAL }
  | '='             { ASSIGN }
  | '>'             { GT }
  | '<'             { LT }
  | ">="            { GE }
  | "<="            { LE }
  | '!'             { NOT }
  | eof             { EOF }
