%{
open Ast
%}

%start Expression

%token <string> ID
%token <System.Double> FLOAT
%token <System.Int32> INT
%token IF THEN ELSE
%token PLUS MINUS TIMES DIV
%token LPAREN RPAREN
%token LBRACE RBRACE
%token GT GE LT LE
%token SEMI 
%token PRINT
%token EQUAL ASSIGN NOT
%token EOF

%type < Ast.Expr > Expression

%left EQUAL
%right ASSIGN
%right IF THEN
%right PRINT

%left SEMI
%left GT GE LT LE
%left MINUS
%left PLUS
%left DIV
%left TIMES 

%right NOT


%%

Expression: 
    | ID    { Ident($1) }
    | FLOAT { Float($1) }
    | INT   { Int($1) }
    | ID ASSIGN Expression            { Assign($1, $3) }
    | IF Expression THEN Expression   { IfThen($2, $4) }
    | PRINT Expression                { Print($2) }
    | LPAREN Expression RPAREN        { $2 }
    | NOT Expression                  { Not($2) }
    | Expression TIMES Expression     { Times($1, $3) }
    | Expression DIV Expression       { Div($1, $3) }
    | Expression PLUS Expression      { Plus($1, $3) }
    | Expression MINUS Expression     { Minus($1, $3) }
    | Expression GT Expression        { Gt($1, $3) }
    | Expression GE Expression        { Ge($1, $3) }
    | Expression LT Expression        { Lt($1, $3) }
    | Expression LE Expression        { Le($1, $3) }
    | Expression EQUAL Expression     { Equal($1, $3) }
    | Expression SEMI                 { $1 }
