// Implementation file for parser generated by fsyacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "parser.fsy"

open Ast

# 9 "parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | EQUAL
  | ASSIGN
  | NOT
  | PRINT
  | SEMI
  | GT
  | GE
  | LT
  | LE
  | LBRACE
  | RBRACE
  | LPAREN
  | RPAREN
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | IF
  | THEN
  | ELSE
  | INT of (System.Int32)
  | FLOAT of (System.Double)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_EQUAL
    | TOKEN_ASSIGN
    | TOKEN_NOT
    | TOKEN_PRINT
    | TOKEN_SEMI
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_INT
    | TOKEN_FLOAT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startExpression
    | NONTERM_Expression

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | EQUAL  -> 1 
  | ASSIGN  -> 2 
  | NOT  -> 3 
  | PRINT  -> 4 
  | SEMI  -> 5 
  | GT  -> 6 
  | GE  -> 7 
  | LT  -> 8 
  | LE  -> 9 
  | LBRACE  -> 10 
  | RBRACE  -> 11 
  | LPAREN  -> 12 
  | RPAREN  -> 13 
  | PLUS  -> 14 
  | MINUS  -> 15 
  | TIMES  -> 16 
  | DIV  -> 17 
  | IF  -> 18 
  | THEN  -> 19 
  | ELSE  -> 20 
  | INT _ -> 21 
  | FLOAT _ -> 22 
  | ID _ -> 23 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_EQUAL 
  | 2 -> TOKEN_ASSIGN 
  | 3 -> TOKEN_NOT 
  | 4 -> TOKEN_PRINT 
  | 5 -> TOKEN_SEMI 
  | 6 -> TOKEN_GT 
  | 7 -> TOKEN_GE 
  | 8 -> TOKEN_LT 
  | 9 -> TOKEN_LE 
  | 10 -> TOKEN_LBRACE 
  | 11 -> TOKEN_RBRACE 
  | 12 -> TOKEN_LPAREN 
  | 13 -> TOKEN_RPAREN 
  | 14 -> TOKEN_PLUS 
  | 15 -> TOKEN_MINUS 
  | 16 -> TOKEN_TIMES 
  | 17 -> TOKEN_DIV 
  | 18 -> TOKEN_IF 
  | 19 -> TOKEN_THEN 
  | 20 -> TOKEN_ELSE 
  | 21 -> TOKEN_INT 
  | 22 -> TOKEN_FLOAT 
  | 23 -> TOKEN_ID 
  | 26 -> TOKEN_end_of_input
  | 24 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startExpression 
    | 1 -> NONTERM_Expression 
    | 2 -> NONTERM_Expression 
    | 3 -> NONTERM_Expression 
    | 4 -> NONTERM_Expression 
    | 5 -> NONTERM_Expression 
    | 6 -> NONTERM_Expression 
    | 7 -> NONTERM_Expression 
    | 8 -> NONTERM_Expression 
    | 9 -> NONTERM_Expression 
    | 10 -> NONTERM_Expression 
    | 11 -> NONTERM_Expression 
    | 12 -> NONTERM_Expression 
    | 13 -> NONTERM_Expression 
    | 14 -> NONTERM_Expression 
    | 15 -> NONTERM_Expression 
    | 16 -> NONTERM_Expression 
    | 17 -> NONTERM_Expression 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 26 
let _fsyacc_tagOfErrorTerminal = 24

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | EQUAL  -> "EQUAL" 
  | ASSIGN  -> "ASSIGN" 
  | NOT  -> "NOT" 
  | PRINT  -> "PRINT" 
  | SEMI  -> "SEMI" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | INT _ -> "INT" 
  | FLOAT _ -> "FLOAT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 25us; 65535us; 0us; 1us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 16us; 17us; 18us; 19us; 19us; 20us; 21us; 22us; 22us; 23us; 24us; 25us; 25us; 26us; 27us; 28us; 28us; 29us; 30us; 31us; 31us; 32us; 33us; 34us; 34us; 35us; 36us; 37us; 37us; 38us; 39us; 40us; 40us; 41us; 42us; 43us; 43us; 44us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 4us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 17us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 79us; 81us; 83us; 85us; 87us; 89us; |]
let _fsyacc_action_rows = 45
let _fsyacc_actionTableElements = [|16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 0us; 49152us; 1us; 16385us; 2us; 5us; 0us; 16386us; 0us; 16387us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 0us; 16388us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 1us; 32768us; 19us; 9us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 0us; 16389us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 0us; 16390us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 1us; 32768us; 13us; 15us; 0us; 16391us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 0us; 16392us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 0us; 16393us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 0us; 16394us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 0us; 16395us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 0us; 16396us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 0us; 16397us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 0us; 16398us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 0us; 16399us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 0us; 16400us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 16us; 32768us; 1us; 42us; 3us; 16us; 4us; 11us; 6us; 30us; 7us; 33us; 8us; 36us; 9us; 39us; 12us; 13us; 14us; 24us; 15us; 27us; 16us; 18us; 17us; 21us; 18us; 7us; 21us; 4us; 22us; 3us; 23us; 2us; 0us; 16401us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 17us; 18us; 20us; 21us; 22us; 39us; 40us; 57us; 59us; 76us; 77us; 94us; 95us; 112us; 114us; 115us; 132us; 133us; 150us; 167us; 168us; 185us; 202us; 203us; 220us; 237us; 238us; 255us; 272us; 273us; 290us; 307us; 308us; 325us; 342us; 343us; 360us; 377us; 378us; 395us; 412us; 413us; 430us; 447us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 3us; 4us; 2us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16386us; 16387us; 65535us; 16388us; 65535us; 65535us; 65535us; 16389us; 65535us; 16390us; 65535us; 65535us; 16391us; 65535us; 16392us; 65535us; 65535us; 16393us; 65535us; 65535us; 16394us; 65535us; 65535us; 16395us; 65535us; 65535us; 16396us; 65535us; 65535us; 16397us; 65535us; 65535us; 16398us; 65535us; 65535us; 16399us; 65535us; 65535us; 16400us; 65535us; 65535us; 16401us; |]
let _fsyacc_reductions ()  =    [| 
# 220 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startExpression));
# 229 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "parser.fsy"
                      Ident(_1) 
                   )
# 31 "parser.fsy"
                 :  Ast.Expr ));
# 240 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "parser.fsy"
                      Float(_1) 
                   )
# 32 "parser.fsy"
                 :  Ast.Expr ));
# 251 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "parser.fsy"
                      Int(_1) 
                   )
# 33 "parser.fsy"
                 :  Ast.Expr ));
# 262 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "parser.fsy"
                      Assign(_1, _3) 
                   )
# 34 "parser.fsy"
                 :  Ast.Expr ));
# 274 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "parser.fsy"
                      IfThen(_2, _4) 
                   )
# 35 "parser.fsy"
                 :  Ast.Expr ));
# 286 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "parser.fsy"
                      Print(_2) 
                   )
# 36 "parser.fsy"
                 :  Ast.Expr ));
# 297 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "parser.fsy"
                      _2 
                   )
# 37 "parser.fsy"
                 :  Ast.Expr ));
# 308 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "parser.fsy"
                      Not(_2) 
                   )
# 38 "parser.fsy"
                 :  Ast.Expr ));
# 319 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "parser.fsy"
                      Times(_2, _3) 
                   )
# 39 "parser.fsy"
                 :  Ast.Expr ));
# 331 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "parser.fsy"
                      Div(_2, _3) 
                   )
# 40 "parser.fsy"
                 :  Ast.Expr ));
# 343 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "parser.fsy"
                      Plus(_2, _3) 
                   )
# 41 "parser.fsy"
                 :  Ast.Expr ));
# 355 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "parser.fsy"
                      Minus(_2, _3) 
                   )
# 42 "parser.fsy"
                 :  Ast.Expr ));
# 367 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "parser.fsy"
                      Gt(_2, _3) 
                   )
# 43 "parser.fsy"
                 :  Ast.Expr ));
# 379 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "parser.fsy"
                      Ge(_2, _3) 
                   )
# 44 "parser.fsy"
                 :  Ast.Expr ));
# 391 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "parser.fsy"
                      Lt(_2, _3) 
                   )
# 45 "parser.fsy"
                 :  Ast.Expr ));
# 403 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "parser.fsy"
                      Le(_2, _3) 
                   )
# 46 "parser.fsy"
                 :  Ast.Expr ));
# 415 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "parser.fsy"
                      Equal(_2, _3) 
                   )
# 47 "parser.fsy"
                 :  Ast.Expr ));
|]
# 428 "parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 27;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Expression lexer lexbuf :  Ast.Expr  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
