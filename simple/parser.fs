// Implementation file for parser generated by fsyacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "parser.fsy"

open Ast

# 9 "parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | NOT
  | PROC
  | CALL
  | GET
  | ASSIGN
  | PRINT
  | EOF
  | SEMI
  | IF
  | THEN
  | ELSE
  | WHILE
  | EQUAL
  | GT
  | GE
  | LT
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | LBRACE
  | RBRACE
  | LPAREN
  | RPAREN
  | INT of (System.Int32)
  | FLOAT of (System.Double)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_NOT
    | TOKEN_PROC
    | TOKEN_CALL
    | TOKEN_GET
    | TOKEN_ASSIGN
    | TOKEN_PRINT
    | TOKEN_EOF
    | TOKEN_SEMI
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_EQUAL
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_INT
    | TOKEN_FLOAT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_decl
    | NONTERM_decls_and_stmts
    | NONTERM_stmtgroup
    | NONTERM_stmt
    | NONTERM_stmt_a1
    | NONTERM_stmt_a2
    | NONTERM_expr
    | NONTERM_expr_p0
    | NONTERM_expr_p1
    | NONTERM_expr_p2
    | NONTERM_expr_p3

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | NOT  -> 0 
  | PROC  -> 1 
  | CALL  -> 2 
  | GET  -> 3 
  | ASSIGN  -> 4 
  | PRINT  -> 5 
  | EOF  -> 6 
  | SEMI  -> 7 
  | IF  -> 8 
  | THEN  -> 9 
  | ELSE  -> 10 
  | WHILE  -> 11 
  | EQUAL  -> 12 
  | GT  -> 13 
  | GE  -> 14 
  | LT  -> 15 
  | LE  -> 16 
  | PLUS  -> 17 
  | MINUS  -> 18 
  | TIMES  -> 19 
  | DIV  -> 20 
  | LBRACE  -> 21 
  | RBRACE  -> 22 
  | LPAREN  -> 23 
  | RPAREN  -> 24 
  | INT _ -> 25 
  | FLOAT _ -> 26 
  | ID _ -> 27 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_NOT 
  | 1 -> TOKEN_PROC 
  | 2 -> TOKEN_CALL 
  | 3 -> TOKEN_GET 
  | 4 -> TOKEN_ASSIGN 
  | 5 -> TOKEN_PRINT 
  | 6 -> TOKEN_EOF 
  | 7 -> TOKEN_SEMI 
  | 8 -> TOKEN_IF 
  | 9 -> TOKEN_THEN 
  | 10 -> TOKEN_ELSE 
  | 11 -> TOKEN_WHILE 
  | 12 -> TOKEN_EQUAL 
  | 13 -> TOKEN_GT 
  | 14 -> TOKEN_GE 
  | 15 -> TOKEN_LT 
  | 16 -> TOKEN_LE 
  | 17 -> TOKEN_PLUS 
  | 18 -> TOKEN_MINUS 
  | 19 -> TOKEN_TIMES 
  | 20 -> TOKEN_DIV 
  | 21 -> TOKEN_LBRACE 
  | 22 -> TOKEN_RBRACE 
  | 23 -> TOKEN_LPAREN 
  | 24 -> TOKEN_RPAREN 
  | 25 -> TOKEN_INT 
  | 26 -> TOKEN_FLOAT 
  | 27 -> TOKEN_ID 
  | 30 -> TOKEN_end_of_input
  | 28 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprogram 
    | 1 -> NONTERM_program 
    | 2 -> NONTERM_decl 
    | 3 -> NONTERM_decls_and_stmts 
    | 4 -> NONTERM_decls_and_stmts 
    | 5 -> NONTERM_decls_and_stmts 
    | 6 -> NONTERM_decls_and_stmts 
    | 7 -> NONTERM_stmtgroup 
    | 8 -> NONTERM_stmtgroup 
    | 9 -> NONTERM_stmt 
    | 10 -> NONTERM_stmt 
    | 11 -> NONTERM_stmt_a1 
    | 12 -> NONTERM_stmt_a1 
    | 13 -> NONTERM_stmt_a1 
    | 14 -> NONTERM_stmt_a1 
    | 15 -> NONTERM_stmt_a1 
    | 16 -> NONTERM_stmt_a1 
    | 17 -> NONTERM_stmt_a1 
    | 18 -> NONTERM_stmt_a1 
    | 19 -> NONTERM_stmt_a2 
    | 20 -> NONTERM_stmt_a2 
    | 21 -> NONTERM_stmt_a2 
    | 22 -> NONTERM_expr 
    | 23 -> NONTERM_expr_p0 
    | 24 -> NONTERM_expr_p0 
    | 25 -> NONTERM_expr_p0 
    | 26 -> NONTERM_expr_p0 
    | 27 -> NONTERM_expr_p0 
    | 28 -> NONTERM_expr_p0 
    | 29 -> NONTERM_expr_p1 
    | 30 -> NONTERM_expr_p1 
    | 31 -> NONTERM_expr_p1 
    | 32 -> NONTERM_expr_p2 
    | 33 -> NONTERM_expr_p2 
    | 34 -> NONTERM_expr_p2 
    | 35 -> NONTERM_expr_p3 
    | 36 -> NONTERM_expr_p3 
    | 37 -> NONTERM_expr_p3 
    | 38 -> NONTERM_expr_p3 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 30 
let _fsyacc_tagOfErrorTerminal = 28

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | NOT  -> "NOT" 
  | PROC  -> "PROC" 
  | CALL  -> "CALL" 
  | GET  -> "GET" 
  | ASSIGN  -> "ASSIGN" 
  | PRINT  -> "PRINT" 
  | EOF  -> "EOF" 
  | SEMI  -> "SEMI" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | EQUAL  -> "EQUAL" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | INT _ -> "INT" 
  | FLOAT _ -> "FLOAT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | NOT  -> (null : System.Object) 
  | PROC  -> (null : System.Object) 
  | CALL  -> (null : System.Object) 
  | GET  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 7us; 9us; 7us; 11us; 7us; 3us; 65535us; 0us; 2us; 9us; 10us; 11us; 12us; 2us; 65535us; 14us; 15us; 19us; 20us; 7us; 65535us; 0us; 8us; 5us; 6us; 9us; 8us; 11us; 8us; 14us; 13us; 19us; 13us; 40us; 44us; 9us; 65535us; 0us; 16us; 5us; 16us; 9us; 16us; 11us; 16us; 14us; 16us; 19us; 16us; 34us; 35us; 40us; 17us; 41us; 42us; 9us; 65535us; 0us; 18us; 5us; 18us; 9us; 18us; 11us; 18us; 14us; 18us; 19us; 18us; 34us; 43us; 40us; 18us; 41us; 45us; 4us; 65535us; 22us; 23us; 29us; 30us; 32us; 33us; 37us; 38us; 5us; 65535us; 22us; 46us; 29us; 46us; 32us; 46us; 37us; 46us; 69us; 47us; 10us; 65535us; 22us; 58us; 29us; 58us; 32us; 58us; 37us; 58us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 69us; 58us; 12us; 65535us; 22us; 63us; 29us; 63us; 32us; 63us; 37us; 63us; 48us; 63us; 50us; 63us; 52us; 63us; 54us; 63us; 56us; 63us; 59us; 60us; 61us; 62us; 69us; 63us; 14us; 65535us; 22us; 68us; 29us; 68us; 32us; 68us; 37us; 68us; 48us; 68us; 50us; 68us; 52us; 68us; 54us; 68us; 56us; 68us; 59us; 68us; 61us; 68us; 64us; 65us; 66us; 67us; 69us; 68us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 14us; 22us; 32us; 42us; 47us; 53us; 64us; 77us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 2us; 2us; 3us; 6us; 2us; 4us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 2us; 7us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 3us; 9us; 18us; 21us; 1us; 10us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 2us; 17us; 19us; 2us; 17us; 19us; 2us; 17us; 19us; 2us; 17us; 19us; 1us; 17us; 3us; 18us; 20us; 21us; 3us; 18us; 20us; 21us; 3us; 18us; 20us; 21us; 3us; 18us; 20us; 21us; 3us; 18us; 20us; 21us; 2us; 18us; 21us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 6us; 22us; 23us; 24us; 25us; 26us; 27us; 6us; 23us; 24us; 25us; 26us; 27us; 35us; 1us; 23us; 3us; 23us; 29us; 30us; 1us; 24us; 3us; 24us; 29us; 30us; 1us; 25us; 3us; 25us; 29us; 30us; 1us; 26us; 3us; 26us; 29us; 30us; 1us; 27us; 3us; 27us; 29us; 30us; 3us; 28us; 29us; 30us; 1us; 29us; 3us; 29us; 32us; 33us; 1us; 30us; 3us; 30us; 32us; 33us; 3us; 31us; 32us; 33us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 17us; 20us; 22us; 24us; 26us; 28us; 31us; 33us; 35us; 37us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 70us; 73us; 76us; 79us; 81us; 85us; 89us; 93us; 97us; 101us; 104us; 106us; 108us; 110us; 112us; 119us; 126us; 128us; 132us; 134us; 138us; 140us; 144us; 146us; 150us; 152us; 156us; 160us; 162us; 166us; 168us; 172us; 176us; 178us; 180us; 182us; 184us; 186us; 188us; 190us; 192us; 194us; |]
let _fsyacc_action_rows = 74
let _fsyacc_actionTableElements = [|8us; 16395us; 1us; 4us; 2us; 24us; 3us; 26us; 5us; 22us; 8us; 36us; 11us; 31us; 21us; 19us; 27us; 28us; 0us; 49152us; 1us; 32768us; 6us; 3us; 0us; 16385us; 1us; 32768us; 27us; 5us; 7us; 16395us; 2us; 24us; 3us; 26us; 5us; 22us; 8us; 36us; 11us; 31us; 21us; 19us; 27us; 28us; 0us; 16386us; 1us; 16387us; 7us; 11us; 1us; 16388us; 7us; 9us; 8us; 16395us; 1us; 4us; 2us; 24us; 3us; 26us; 5us; 22us; 8us; 36us; 11us; 31us; 21us; 19us; 27us; 28us; 0us; 16389us; 8us; 16395us; 1us; 4us; 2us; 24us; 3us; 26us; 5us; 22us; 8us; 36us; 11us; 31us; 21us; 19us; 27us; 28us; 0us; 16390us; 1us; 16391us; 7us; 14us; 7us; 16395us; 2us; 24us; 3us; 26us; 5us; 22us; 8us; 36us; 11us; 31us; 21us; 19us; 27us; 28us; 0us; 16392us; 0us; 16393us; 1us; 16393us; 10us; 41us; 0us; 16394us; 7us; 16395us; 2us; 24us; 3us; 26us; 5us; 22us; 8us; 36us; 11us; 31us; 21us; 19us; 27us; 28us; 1us; 32768us; 22us; 21us; 0us; 16396us; 4us; 32768us; 23us; 69us; 25us; 72us; 26us; 73us; 27us; 71us; 0us; 16397us; 1us; 32768us; 27us; 25us; 0us; 16398us; 1us; 32768us; 27us; 27us; 0us; 16399us; 1us; 32768us; 4us; 29us; 4us; 32768us; 23us; 69us; 25us; 72us; 26us; 73us; 27us; 71us; 0us; 16400us; 1us; 32768us; 23us; 32us; 4us; 32768us; 23us; 69us; 25us; 72us; 26us; 73us; 27us; 71us; 1us; 32768us; 24us; 34us; 7us; 16395us; 2us; 24us; 3us; 26us; 5us; 22us; 8us; 36us; 11us; 31us; 21us; 19us; 27us; 28us; 0us; 16401us; 1us; 32768us; 23us; 37us; 4us; 32768us; 23us; 69us; 25us; 72us; 26us; 73us; 27us; 71us; 1us; 32768us; 24us; 39us; 1us; 32768us; 9us; 40us; 7us; 16395us; 2us; 24us; 3us; 26us; 5us; 22us; 8us; 36us; 11us; 31us; 21us; 19us; 27us; 28us; 7us; 16395us; 2us; 24us; 3us; 26us; 5us; 22us; 8us; 36us; 11us; 31us; 21us; 19us; 27us; 28us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 5us; 16406us; 12us; 48us; 13us; 50us; 14us; 54us; 15us; 52us; 16us; 56us; 6us; 32768us; 12us; 48us; 13us; 50us; 14us; 54us; 15us; 52us; 16us; 56us; 24us; 70us; 4us; 32768us; 23us; 69us; 25us; 72us; 26us; 73us; 27us; 71us; 2us; 16407us; 17us; 59us; 18us; 61us; 4us; 32768us; 23us; 69us; 25us; 72us; 26us; 73us; 27us; 71us; 2us; 16408us; 17us; 59us; 18us; 61us; 4us; 32768us; 23us; 69us; 25us; 72us; 26us; 73us; 27us; 71us; 2us; 16409us; 17us; 59us; 18us; 61us; 4us; 32768us; 23us; 69us; 25us; 72us; 26us; 73us; 27us; 71us; 2us; 16410us; 17us; 59us; 18us; 61us; 4us; 32768us; 23us; 69us; 25us; 72us; 26us; 73us; 27us; 71us; 2us; 16411us; 17us; 59us; 18us; 61us; 2us; 16412us; 17us; 59us; 18us; 61us; 4us; 32768us; 23us; 69us; 25us; 72us; 26us; 73us; 27us; 71us; 2us; 16413us; 19us; 64us; 20us; 66us; 4us; 32768us; 23us; 69us; 25us; 72us; 26us; 73us; 27us; 71us; 2us; 16414us; 19us; 64us; 20us; 66us; 2us; 16415us; 19us; 64us; 20us; 66us; 4us; 32768us; 23us; 69us; 25us; 72us; 26us; 73us; 27us; 71us; 0us; 16416us; 4us; 32768us; 23us; 69us; 25us; 72us; 26us; 73us; 27us; 71us; 0us; 16417us; 0us; 16418us; 4us; 32768us; 23us; 69us; 25us; 72us; 26us; 73us; 27us; 71us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 9us; 10us; 12us; 13us; 15us; 23us; 24us; 26us; 28us; 37us; 38us; 47us; 48us; 50us; 58us; 59us; 60us; 62us; 63us; 71us; 73us; 74us; 79us; 80us; 82us; 83us; 85us; 86us; 88us; 93us; 94us; 96us; 101us; 103us; 111us; 112us; 114us; 119us; 121us; 123us; 131us; 139us; 140us; 141us; 142us; 143us; 149us; 156us; 161us; 164us; 169us; 172us; 177us; 180us; 185us; 188us; 193us; 196us; 199us; 204us; 207us; 212us; 215us; 218us; 223us; 224us; 229us; 230us; 231us; 236us; 237us; 238us; 239us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 1us; 1us; 3us; 3us; 1us; 3us; 1us; 1us; 0us; 3us; 2us; 2us; 2us; 3us; 5us; 8us; 5us; 6us; 8us; 1us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 1us; 3us; 3us; 1us; 3us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 7us; 8us; 9us; 9us; 9us; 9us; 9us; 9us; 10us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 12us; 12us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 16386us; 65535us; 65535us; 65535us; 16389us; 65535us; 16390us; 65535us; 65535us; 16392us; 16393us; 65535us; 16394us; 65535us; 65535us; 16396us; 65535us; 16397us; 65535us; 16398us; 65535us; 16399us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 16403us; 16404us; 16405us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 16417us; 16418us; 65535us; 16419us; 16420us; 16421us; 16422us; |]
let _fsyacc_reductions ()  =    [| 
# 276 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.stree list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startprogram));
# 285 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls_and_stmts)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "parser.fsy"
                      _1 
                   )
# 27 "parser.fsy"
                 : Ast.stree list));
# 296 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "parser.fsy"
                     PROC_TREE (_2,_3)
                   )
# 30 "parser.fsy"
                 : 'decl));
# 308 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "parser.fsy"
                      [_1] 
                   )
# 34 "parser.fsy"
                 : 'decls_and_stmts));
# 319 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "parser.fsy"
                      [_1] 
                   )
# 36 "parser.fsy"
                 : 'decls_and_stmts));
# 330 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls_and_stmts)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "parser.fsy"
                      _1 :: _3 
                   )
# 38 "parser.fsy"
                 : 'decls_and_stmts));
# 342 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls_and_stmts)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "parser.fsy"
                      _1 :: _3 
                   )
# 40 "parser.fsy"
                 : 'decls_and_stmts));
# 354 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "parser.fsy"
                      [_1] 
                   )
# 42 "parser.fsy"
                 : 'stmtgroup));
# 365 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmtgroup)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "parser.fsy"
                      _1 :: _3 
                   )
# 43 "parser.fsy"
                 : 'stmtgroup));
# 377 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt_a1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "parser.fsy"
                      _1 
                   )
# 46 "parser.fsy"
                 : 'stmt));
# 388 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt_a2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "parser.fsy"
                      _1 
                   )
# 47 "parser.fsy"
                 : 'stmt));
# 399 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "parser.fsy"
                      NOOP_TREE 
                   )
# 50 "parser.fsy"
                 : 'stmt_a1));
# 409 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmtgroup)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "parser.fsy"
                      STMT_GROUP_TREE _2 
                   )
# 51 "parser.fsy"
                 : 'stmt_a1));
# 420 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "parser.fsy"
                      PRINT_TREE _2 
                   )
# 52 "parser.fsy"
                 : 'stmt_a1));
# 431 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "parser.fsy"
                      CALL_TREE _2 
                   )
# 53 "parser.fsy"
                 : 'stmt_a1));
# 442 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "parser.fsy"
                      GET_TREE _2 
                   )
# 54 "parser.fsy"
                 : 'stmt_a1));
# 453 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "parser.fsy"
                      ASSIGN_TREE (_1,_3) 
                   )
# 55 "parser.fsy"
                 : 'stmt_a1));
# 465 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt_a1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "parser.fsy"
                      WHILE_TREE(_3,_5)
                   )
# 56 "parser.fsy"
                 : 'stmt_a1));
# 477 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt_a1)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt_a1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "parser.fsy"
                      IF_TREE(_3,_6,_8) 
                   )
# 57 "parser.fsy"
                 : 'stmt_a1));
# 490 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt_a2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "parser.fsy"
                      WHILE_TREE(_3,_5)
                   )
# 60 "parser.fsy"
                 : 'stmt_a2));
# 502 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "parser.fsy"
                      IF_TREE(_3,_6,NOOP_TREE) 
                   )
# 61 "parser.fsy"
                 : 'stmt_a2));
# 514 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt_a1)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt_a2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "parser.fsy"
                      IF_TREE(_3,_6,_8) 
                   )
# 62 "parser.fsy"
                 : 'stmt_a2));
# 527 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "parser.fsy"
                      _1 
                   )
# 66 "parser.fsy"
                 : 'expr));
# 538 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p0)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "parser.fsy"
                      EQEQ_TREE (_1,_3) 
                   )
# 69 "parser.fsy"
                 : 'expr_p0));
# 550 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p0)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "parser.fsy"
                      GT_TREE (_1,_3) 
                   )
# 70 "parser.fsy"
                 : 'expr_p0));
# 562 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p0)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "parser.fsy"
                      GT_TREE (_3,_1) 
                   )
# 71 "parser.fsy"
                 : 'expr_p0));
# 574 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p0)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "parser.fsy"
                      GE_TREE (_1,_3) 
                   )
# 72 "parser.fsy"
                 : 'expr_p0));
# 586 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p0)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "parser.fsy"
                      GE_TREE (_3,_1) 
                   )
# 73 "parser.fsy"
                 : 'expr_p0));
# 598 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "parser.fsy"
                      _1 
                   )
# 74 "parser.fsy"
                 : 'expr_p0));
# 609 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "parser.fsy"
                      PLUS_TREE (_1,_3) 
                   )
# 77 "parser.fsy"
                 : 'expr_p1));
# 621 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "parser.fsy"
                      MINUS_TREE (_1,_3) 
                   )
# 78 "parser.fsy"
                 : 'expr_p1));
# 633 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "parser.fsy"
                      _1 
                   )
# 79 "parser.fsy"
                 : 'expr_p1));
# 644 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "parser.fsy"
                      TIMES_TREE (_1,_3) 
                   )
# 82 "parser.fsy"
                 : 'expr_p2));
# 656 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "parser.fsy"
                      DIV_TREE (_1,_3) 
                   )
# 83 "parser.fsy"
                 : 'expr_p2));
# 668 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "parser.fsy"
                      _1 
                   )
# 84 "parser.fsy"
                 : 'expr_p2));
# 679 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_p0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "parser.fsy"
                      _2 
                   )
# 87 "parser.fsy"
                 : 'expr_p3));
# 690 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "parser.fsy"
                      ID_TREE _1 
                   )
# 88 "parser.fsy"
                 : 'expr_p3));
# 701 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "parser.fsy"
                      INT_TREE _1 
                   )
# 89 "parser.fsy"
                 : 'expr_p3));
# 712 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "parser.fsy"
                     FLOAT_TREE _1
                   )
# 90 "parser.fsy"
                 : 'expr_p3));
|]
# 724 "parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 31;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let program lexer lexbuf : Ast.stree list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
